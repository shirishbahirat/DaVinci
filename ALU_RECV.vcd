$date
	Tue Apr 30 11:53:52 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module Test_ALU_RECV $end
$var wire 32 ! rd [31:0] $end
$var wire 32 " pc_out [31:0] $end
$var wire 32 # address [31:0] $end
$var reg 32 $ address_imm [31:0] $end
$var reg 10 % alu_op [9:0] $end
$var reg 5 & b_op [4:0] $end
$var reg 5 ' j_op [4:0] $end
$var reg 5 ( ls_op [4:0] $end
$var reg 32 ) pc_in [31:0] $end
$var reg 32 * rs1 [31:0] $end
$var reg 32 + rs2 [31:0] $end
$scope module test_alu_recv $end
$var wire 32 , address_imm [31:0] $end
$var wire 10 - alu_op [9:0] $end
$var wire 5 . b_op [4:0] $end
$var wire 5 / j_op [4:0] $end
$var wire 5 0 ls_op [4:0] $end
$var wire 32 1 pc_in [31:0] $end
$var wire 32 2 rs1 [31:0] $end
$var wire 32 3 rs2 [31:0] $end
$var wire 32 4 X_xor_rd [31:0] $end
$var wire 32 5 S_sub_rd [31:0] $end
$var wire 32 6 SRL_srl_rd [31:0] $end
$var wire 32 7 SRA_sra_rd [31:0] $end
$var wire 32 8 SLT_slt_rd [31:0] $end
$var wire 32 9 SLTU_sltu_rd [31:0] $end
$var wire 32 : SLL_sll_rd [31:0] $end
$var wire 32 ; O_or_rd [31:0] $end
$var wire 32 < A_add_rd [31:0] $end
$var wire 32 = AND_and_rd [31:0] $end
$var reg 32 > address [31:0] $end
$var reg 32 ? pc_out [31:0] $end
$var reg 32 @ rd [31:0] $end
$var reg 32 A rs1_num [31:0] $end
$var reg 32 B rs2_num [31:0] $end
$scope module add_add $end
$var wire 32 C add_rs1 [31:0] $end
$var wire 32 D add_rs2 [31:0] $end
$var wire 32 E add_rd [31:0] $end
$upscope $end
$scope module and_and $end
$var wire 32 F and_rd [31:0] $end
$var wire 32 G and_rs1 [31:0] $end
$var wire 32 H and_rs2 [31:0] $end
$upscope $end
$scope module or_or $end
$var wire 32 I or_rd [31:0] $end
$var wire 32 J or_rs1 [31:0] $end
$var wire 32 K or_rs2 [31:0] $end
$upscope $end
$scope module sll_sll $end
$var wire 32 L sll_rs1 [31:0] $end
$var wire 32 M sll_rs2 [31:0] $end
$var wire 32 N sll_rd [31:0] $end
$upscope $end
$scope module slt_slt $end
$var wire 32 O slt_rs1 [31:0] $end
$var wire 32 P slt_rs2 [31:0] $end
$var reg 32 Q slt_rd [31:0] $end
$upscope $end
$scope module sltu_sltu $end
$var wire 32 R sltu_rs1 [31:0] $end
$var wire 32 S sltu_rs2 [31:0] $end
$var reg 32 T sltu_rd [31:0] $end
$upscope $end
$scope module sra_sra $end
$var wire 32 U sra_rs1 [31:0] $end
$var wire 32 V sra_rs2 [31:0] $end
$var wire 32 W sra_rd [31:0] $end
$upscope $end
$scope module srl_srl $end
$var wire 32 X srl_rs1 [31:0] $end
$var wire 32 Y srl_rs2 [31:0] $end
$var wire 32 Z srl_rd [31:0] $end
$upscope $end
$scope module sub_sub $end
$var wire 32 [ sub_rs1 [31:0] $end
$var wire 32 \ sub_rs2 [31:0] $end
$var wire 32 ] sub_rd [31:0] $end
$upscope $end
$scope module xor_xor $end
$var wire 32 ^ xor_rd [31:0] $end
$var wire 32 _ xor_rs1 [31:0] $end
$var wire 32 ` xor_rs2 [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1 `
b1 _
b0 ^
b0 ]
b1 \
b1 [
b0 Z
b1 Y
b1 X
b0 W
b1 V
b1 U
b0 T
b1 S
b1 R
b0 Q
b1 P
b1 O
b10 N
b1 M
b1 L
b1 K
b1 J
b1 I
b1 H
b1 G
b1 F
b10 E
b1 D
b1 C
b1 B
b1 A
b10 @
b0 ?
b0 >
b1 =
b10 <
b1 ;
b10 :
b0 9
b0 8
b0 7
b0 6
b0 5
b0 4
b0 3
b1 2
b0 1
b11111 0
b11111 /
b11111 .
b1000000001 -
b1 ,
b0 +
b1 *
b0 )
b11111 (
b11111 '
b11111 &
b1000000001 %
b1 $
b0 #
b0 "
b10 !
$end
#5
b1101 ;
b1101 I
b1100 4
b1100 ^
b0 !
b0 @
b1110 #
b1110 >
b1110 <
b1110 E
b11010 :
b11010 N
b110 7
b110 W
b110 6
b110 Z
b1100 5
b1100 ]
b1101 A
b1101 C
b1101 G
b1101 J
b1101 L
b1101 O
b1101 R
b1101 U
b1101 X
b1101 [
b1101 _
b1101 *
b1101 2
b11 (
b11 0
b1111111111 %
b1111111111 -
#10
b11 ;
b11 I
b10 4
b10 ^
b0 #
b0 >
b111 !
b111 @
b100 "
b100 ?
b100 <
b100 E
b110 :
b110 N
b1 7
b1 W
b1 6
b1 Z
b10 5
b10 ]
b11 A
b11 C
b11 G
b11 J
b11 L
b11 O
b11 R
b11 U
b11 X
b11 [
b11 _
b0 *
b0 2
b11 )
b11 1
b10 '
b10 /
b11111 (
b11111 0
#15
b1001 $
b1001 ,
b1 +
b1 3
b11 *
b11 2
b1101100 )
b1101100 1
b101 &
b101 .
b11111 '
b11111 /
#20
b1000 =
b1000 F
b1101101 ;
b1101101 I
b1100101 4
b1100101 ^
b0 !
b0 @
b1110101 "
b1110101 ?
b1001 B
b1001 D
b1001 H
b1001 K
b1001 M
b1001 P
b1001 S
b1001 V
b1001 Y
b1001 \
b1001 `
b1110101 <
b1110101 E
b1101100000000000 :
b1101100000000000 N
b0 7
b0 W
b0 6
b0 Z
b1100011 5
b1100011 ]
b1101100 A
b1101100 C
b1101100 G
b1101100 J
b1101100 L
b1101100 O
b1101100 R
b1101100 U
b1101100 X
b1101100 [
b1101100 _
b1 *
b1 2
b11 +
b11 3
#25
